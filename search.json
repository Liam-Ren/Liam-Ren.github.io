[{"title":"Hexo写作","url":"/2024/10/29/Hexo%E5%86%99%E4%BD%9C/","content":"<h2 id=\"写作流程\"><a href=\"#写作流程\" class=\"headerlink\" title=\"写作流程\"></a>写作流程</h2><p>在_posts文件夹下新增<code>.md</code>文件或通过指令创建</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo n 你的文章名</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://liam123.oss-cn-hangzhou.aliyuncs.com/blog/image-20241029160626400.png\" alt=\"image-20241029160626400\"></p>\n<p>使用Typora创建<code>.md</code>文件后进行写作</p>\n<p><img src=\"https://liam123.oss-cn-hangzhou.aliyuncs.com/blog/image-20241029161709945.png\" alt=\"image-20241029161709945\"></p>\n<h2 id=\"文件配置\"><a href=\"#文件配置\" class=\"headerlink\" title=\"文件配置\"></a>文件配置</h2><h3 id=\"Front-matter\"><a href=\"#Front-matter\" class=\"headerlink\" title=\"Front-matter\"></a>Front-matter</h3><p>Front-matter 是 markdown 文件最上方以 — 分隔的区域，用于指定文件配置。</p>\n<ul>\n<li>Page Front-matter 用于<strong>页面</strong>配置</li>\n<li>Post Front-matter 用于<strong>文章页</strong>配置</li>\n</ul>\n<h4 id=\"Page-Front-matter\"><a href=\"#Page-Front-matter\" class=\"headerlink\" title=\"Page Front-matter\"></a>Page Front-matter</h4><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title:页面标题</span><br><span class=\"line\">date:页面创建日期</span><br><span class=\"line\">updated:页面更新日期</span><br><span class=\"line\">type:标签、分类和友情链接三个页面需要配置</span><br><span class=\"line\">comments:显示页面评论模块(默认true)</span><br><span class=\"line\">description:页面描述</span><br><span class=\"line\">keywords:页面关键词</span><br><span class=\"line\"><span class=\"section\">top<span class=\"emphasis\">_img:页面顶部图片</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\">---</span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"section\"></span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Post-Front-matter\"><a href=\"#Post-Front-matter\" class=\"headerlink\" title=\"Post Front-matter\"></a>Post Front-matter</h4><figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title:文章标题</span><br><span class=\"line\">date:文章创建日期</span><br><span class=\"line\">updated:文章更新日期</span><br><span class=\"line\">tags:文章标签</span><br><span class=\"line\">categories:文章分类</span><br><span class=\"line\">keywords:文章关键字</span><br><span class=\"line\">description:文章描述</span><br><span class=\"line\">top<span class=\"emphasis\">_img:文章顶部图片</span></span><br><span class=\"line\"><span class=\"emphasis\">comments:显示文章评论模块(默认 true)</span></span><br><span class=\"line\"><span class=\"emphasis\">cover:文章缩略图(如果没有设置 top_</span>img,文章页顶部将显示缩略图，可设为 false/图片地址/留空)</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>自定义文章 Post Front-matter 配置项</p>\n<p>在 <code>scaffolds</code> 文件夹下找到 <code>post.md</code> 文件进行修改</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\"><span class=\"section\"># 标题</span></span><br><span class=\"line\">title: &#123;&#123; title &#125;&#125;</span><br><span class=\"line\">date: &#123;&#123; date &#125;&#125;</span><br><span class=\"line\">author: Liam</span><br><span class=\"line\"><span class=\"section\"># 简述</span></span><br><span class=\"line\">img: </span><br><span class=\"line\"><span class=\"section\"># 文章顶部图片</span></span><br><span class=\"line\">top<span class=\"emphasis\">_img:</span></span><br><span class=\"line\"><span class=\"emphasis\"># 是否置顶</span></span><br><span class=\"line\"><span class=\"emphasis\">top: </span></span><br><span class=\"line\"><span class=\"emphasis\"># 文章缩略图(如果没有设置 top_</span>img,文章页顶部将显示缩略图，可设为 false/图片地址/留空)</span><br><span class=\"line\">cover:</span><br><span class=\"line\"><span class=\"section\"># 轮播图</span></span><br><span class=\"line\">coverImg: </span><br><span class=\"line\"><span class=\"section\"># 标签</span></span><br><span class=\"line\">tags: </span><br><span class=\"line\"><span class=\"section\"># 分类</span></span><br><span class=\"line\">categories: </span><br><span class=\"line\"><span class=\"section\"># 是否加密文章，SHA256加密</span></span><br><span class=\"line\"><span class=\"section\">password: </span></span><br><span class=\"line\"><span class=\"section\">---</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"标签页、分类页、友链\"><a href=\"#标签页、分类页、友链\" class=\"headerlink\" title=\"标签页、分类页、友链\"></a>标签页、分类页、友链</h4><blockquote>\n<p>此处使用标签页作为示例，其他页面设置与其类似<br>标签页文件名不一定是 tags, 例子中的 tags 只是一个示例<br>记得添加 type: “tags”</p>\n</blockquote>\n<p><strong>创建步骤</strong></p>\n<ol>\n<li>前往你的 Hexo 的根目录</li>\n<li>输入 hexo new page tags</li>\n<li>你会找到 source&#x2F;tags&#x2F;index.md 这个文件</li>\n<li>修改这个文件</li>\n</ol>\n<p><strong>参数说明</strong></p>\n<ul>\n<li>type\t【必须】页面类型，必须为 tags</li>\n<li>orderby\t【可选】排序方式 ：</li>\n<li>random - 随机排序 &#x2F; name - 标签名字排序 &#x2F; length - 标签数量排序</li>\n<li>order\t【可选】排序次序： 1（升序），-1（降序）</li>\n</ul>\n<h4 id=\"阿里云-Picgo创建图床\"><a href=\"#阿里云-Picgo创建图床\" class=\"headerlink\" title=\"阿里云 + Picgo创建图床\"></a>阿里云 + Picgo创建图床</h4><ol>\n<li>登录阿里云网站，进入工作台页面，搜索对象存储，进入该页面，然后点击bucket列表</li>\n</ol>\n<p><img src=\"https://liam123.oss-cn-hangzhou.aliyuncs.com/blog/image-20241029171112732.png\" alt=\"image-20241029171112732\"></p>\n<ol start=\"2\">\n<li><p>进入页面，点击创建bucket.</p>\n<ul>\n<li><p>Bucket名称和地域必填。地域选择一个距离自己近一些的地方。</p>\n</li>\n<li><p>读写权限选择为公共读，其余均默认</p>\n</li>\n</ul>\n</li>\n<li><p>在右上角头像处进入并创建一个key</p>\n</li>\n</ol>\n<p><img src=\"https://liam123.oss-cn-hangzhou.aliyuncs.com/blog/image-20241029171526199.png\" alt=\"image-20241029171526199\"></p>\n<ol start=\"4\">\n<li>打开Picgo，点击图床设置，选择阿里云OSS，填写如下信息。</li>\n</ol>\n<p><img src=\"https://liam123.oss-cn-hangzhou.aliyuncs.com/blog/image-20241029172026575.png\" alt=\"image-20241029172026575\"></p>\n<ol start=\"5\">\n<li>结合Typora使用</li>\n</ol>\n<p><img src=\"https://liam123.oss-cn-hangzhou.aliyuncs.com/blog/image-20241029172425118.png\" alt=\"image-20241029172425118\"></p>\n","categories":["个人笔记"],"tags":["Hexo"]},{"title":"知识图谱","url":"/2024/10/29/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/","content":"<h1 id=\"一、知识图谱\"><a href=\"#一、知识图谱\" class=\"headerlink\" title=\"一、知识图谱\"></a>一、知识图谱</h1><h2 id=\"1-1-基本概念\"><a href=\"#1-1-基本概念\" class=\"headerlink\" title=\"1.1 基本概念\"></a>1.1 基本概念</h2><p>知识图谱，在2012年由谷歌提出，是<strong>结构化</strong>的语义知识库，用于以<strong>符号形式</strong>描述物理世界中的<strong>概念及其相互关系</strong>。</p>\n<p>基本组成形式(基本单位)：&lt;实体,关系,实体&gt;构成的<strong>三元组</strong>。</p>\n<p><img src=\"https://liam123.oss-cn-hangzhou.aliyuncs.com/blog/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1.PNG\" alt=\"知识图谱\"></p>\n<p><strong>图1</strong>：知识图谱</p>\n<h2 id=\"1-2-数据类型和存储方式\"><a href=\"#1-2-数据类型和存储方式\" class=\"headerlink\" title=\"1.2 数据类型和存储方式\"></a>1.2 数据类型和存储方式</h2><p>知识图谱的原始数据类型一般来说有三类：</p>\n<ul>\n<li>结构化数据（Structed Data），如：关系数据库、链接数据</li>\n<li>半结构化数据（Semi-Structured Data），如：txt、PDF、XML、JSON、百科</li>\n<li>非结构化数据（Unstructured Data），如：图片、音频、视频</li>\n</ul>\n<p>知识图谱的存储方式主要分为两种：</p>\n<p>  <strong>资源描述框架（<strong><strong>RDF</strong></strong>）</strong>：RDF是一种用于描述网络上资源及其关系的标准格式。RDF使用三元组来表示实体及其关系，RDF存储的优点在于其标准化和互操作性，可以方便地与其他语义数据进行集成。然而，对于非常复杂或大规模的数据集，查询性能可能会成为一个瓶颈。</p>\n<p>  <strong>图数据库（<strong><strong>Graph Databases</strong></strong>）</strong>：图数据库专门为处理图结构数据而设计，使用节点和边来表示实体及其关系，具有很高的查询性能和灵活性，常用的有 Neo4j，JanusGraph等，适用于大规模和关系复杂的数据场景，具有高效的查询性能和灵活性。</p>\n<h2 id=\"1-3-构建流程\"><a href=\"#1-3-构建流程\" class=\"headerlink\" title=\"1.3 构建流程\"></a>1.3 构建流程</h2><h3 id=\"逻辑架构\"><a href=\"#逻辑架构\" class=\"headerlink\" title=\"逻辑架构\"></a>逻辑架构</h3><ul>\n<li><strong>数据层</strong>：存储真实的数据。</li>\n<li><strong>模式层</strong>：在数据层之上，模式层定义了知识图谱的组织结构和类型体系，是知识图谱的元数据部分。</li>\n</ul>\n<p><strong>示例</strong>： 假设我们有一个关于电影的知识图谱，数据层可能包含以下信息：</p>\n<ul>\n<li>《泰坦尼克号》是一部1997年上映的电影。</li>\n<li>詹姆斯·卡梅隆是《泰坦尼克号》的导演。</li>\n<li>莱昂纳多·迪卡普里奥在《泰坦尼克号》中扮演杰克。</li>\n</ul>\n<p>这些信息以三元组的形式存储，在<strong>数据层</strong>与<strong>模式层</strong>：</p>\n<ul>\n<li>(《泰坦尼克号》——上映年份——1997)&lt;——&gt;(实体——属性——属性值)</li>\n<li>(《泰坦尼克号》——导演——詹姆斯·卡梅隆)&lt;——&gt;(实体——关系——实体)</li>\n<li>(莱昂纳多·迪卡普里奥——扮演角色——杰克)&lt;——&gt;(实体——关系——实体)</li>\n</ul>\n<p><img src=\"https://liam123.oss-cn-hangzhou.aliyuncs.com/blog/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E6%9E%84%E5%BB%BA%E6%B5%81%E7%A8%8B.PNG\" alt=\"知识图谱构建流程\"></p>\n<p><strong>图2</strong>：知识图谱构建流程</p>\n<h3 id=\"知识抽取\"><a href=\"#知识抽取\" class=\"headerlink\" title=\"知识抽取\"></a>知识抽取</h3><p>从各种类型的数据源中提取出<strong>实体</strong>、<strong>属性</strong>以及实体间的相互<strong>关系</strong>，在此基础上形成本体话的知识表达。</p>\n<ul>\n<li><strong>实体抽取：</strong>也称为命名实体识别（named entity recognition，NER），是指从文本数据集中自动识别出命名实体。</li>\n<li><strong>关系抽取：</strong>为了得到语义信息，还需要从相关语料中提取出实体之间的关联关系，通过关系将实体联系起来，才能够形成网状的知识结构。</li>\n<li><strong>属性抽取：</strong>从不同信息源中采集特定实体的属性信息。</li>\n</ul>\n<h3 id=\"知识融合\"><a href=\"#知识融合\" class=\"headerlink\" title=\"知识融合\"></a>知识融合</h3><p>在获得新知识之后，需要对其进行整合，以消除矛盾和歧义，比如某些实体可能有多种表达，某个特定称谓也许对应于多个不同的实体等。</p>\n<ul>\n<li><p><strong>实体链接：</strong>对于从文本中抽取得到的实体对象，将其链接到知识库中对应的正确实体对象的操作，针对<strong>半结构化数据和非结构化数据</strong>。</p>\n<ul>\n<li>同名实体产生歧义问题——<strong>实体消歧。</strong></li>\n</ul>\n<blockquote>\n<ol>\n<li>假设存在两个版本的《泰坦尼克号》电影，一个是1997年詹姆斯·卡梅隆导演的版本，另一个是1958年的早期版本。在抽取过程中，如果文本中提到了《泰坦尼克号》，我们需要确定它指的是哪一个版本。</li>\n<li>电影中可能有一些虚构的角色，它们与真实人物同名。例如，电影中可能有一个虚构的配角也叫“詹姆斯”。而在一些影评中可能存在对导演“詹姆斯·卡梅隆”的评价，需要通过实体消歧来确定这个“詹姆斯”是否是电影中的一个虚构角色。</li>\n</ol>\n</blockquote>\n<ul>\n<li>多个指称对应同一实体对象的问题——<strong>共指消解</strong>。</li>\n</ul>\n<blockquote>\n<ol>\n<li>例如在文本中提到“男主角杰克”和“他在电影中的表现”，共指消解将帮助我们确定这两个指称(“男主角杰克”和”他”)都是指向《泰坦尼克号》中的角色“Jack Dawson”。</li>\n<li>在影评中可能同时出现“男主角”和角色名“杰克”，我们需要确定它们都指的是同一个人。</li>\n</ol>\n</blockquote>\n</li>\n<li><p><strong>知识合并：</strong>处理<strong>结构化数据</strong>，比如外部知识库和关系数据库。</p>\n<blockquote>\n<ul>\n<li>假设已有一个外部数据库提供了《泰坦尼克号》的详细信息，包括演员、工作人员、上映日期等。我们的知识库可能已经有了一些这部电影的信息。知识合并的过程将包括：<ul>\n<li>核对外部数据库中提供的数据与知识库中的信息是否一致。</li>\n<li>解决任何数据冲突，例如，如果外部数据库中列出的上映日期与知识库中的日期不符，需要进一步验证哪个是正确的。</li>\n<li>将外部数据库中的额外信息（如电影的技术规格、获奖情况等）添加到知识库中，以丰富《泰坦尼克号》的条目。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"知识加工\"><a href=\"#知识加工\" class=\"headerlink\" title=\"知识加工\"></a>知识加工</h3><p>通过知识抽取以及知识融合后，获得了一系列基本的事实表达，但这些不等于知识。要想最终获得结构化、网络化的知识体系，还需要经历知识加工的过程。</p>\n<p>知识加工主要包括三个方面的内容：<strong>本体构建、知识推理和质量评估</strong>。</p>\n<ul>\n<li><p><strong>本体构建：</strong>本体提供了一个框架，定义了可以存储在知识图谱中的实体类型、属性和关系。</p>\n<blockquote>\n<ul>\n<li><strong>实体类型</strong>：定义电影、导演、演员、角色、电影公司等实体类型。</li>\n<li><strong>属性</strong>：为每种实体类型定义属性，例如电影可能有属性如上映日期、类型、票房、导演、主演等。</li>\n<li><strong>关系</strong>：定义实体之间的关系，如“导演执导了电影”、“演员扮演了角色”等。</li>\n</ul>\n<p>这一整个知识图谱的框架就是一个本体。</p>\n</blockquote>\n</li>\n<li><p><strong>知识推理：</strong>经过本体构建后，形成了一个知识图谱的雏形。但这时候，知识图谱的缺失值可能很严重，因此需要使用知识推理，利用已有的知识来发现新知识，填补知识图谱中的缺失信息，增强知识之间的联系。</p>\n</li>\n<li><p><strong>质量评估：</strong></p>\n<ul>\n<li>质量评估的目的是量化知识的可信度，确保知识库的质量。通过评估，可以识别并舍弃那些置信度较低的知识，从而维护知识库的准确性和可靠性。</li>\n<li>质量评估可能包括多个方面，如数据源的可靠性、数据的一致性（检查是否存在矛盾或冗余问题）等。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"二、-LLM-背景下的知识图谱\"><a href=\"#二、-LLM-背景下的知识图谱\" class=\"headerlink\" title=\"二、 LLM 背景下的知识图谱\"></a>二、 LLM 背景下的知识图谱</h1><h2 id=\"2-1-知识图谱分类\"><a href=\"#2-1-知识图谱分类\" class=\"headerlink\" title=\"2.1 知识图谱分类\"></a>2.1 知识图谱分类</h2><p><img src=\"https://liam123.oss-cn-hangzhou.aliyuncs.com/blog/2bd53815-84dd-4913-920f-b3be2f18acfe.png\" alt=\"2bd53815-84dd-4913-920f-b3be2f18acfe\"></p>\n<p><strong>图3</strong>：不同类别知识图谱示例</p>\n<p>知识图谱按存储信息大致可以分为以下四类：</p>\n<ul>\n<li>百科全书式知识图谱</li>\n</ul>\n<p>百科知识图谱是最普遍的知识图谱，它代表了现实世界中的常识。百科全书知识图通常是通过整合来自不同和广泛来源的信息来构建的，包括人类专家、百科全书和数据库。</p>\n<ul>\n<li>常识知识图谱</li>\n</ul>\n<p>常识知识图谱表述了有关日常概念的知识，例如对象和事件及其关系。与百科全书式知识图相比，常识知识图往往对从文本中提取的隐性知识进行建模</p>\n<ul>\n<li>特定领域知识图谱</li>\n</ul>\n<p>特定领域的知识图通常被构建来表示特定领域的知识，例如医学、生物学和金融。与百科全书式的知识图谱相比，特定领域的知识图谱往往尺寸更小，但更准确、更可靠。</p>\n<ul>\n<li>多模态知识图谱</li>\n</ul>\n<p>与仅包含文本信息的传统知识图不同，多模态知识图以图像、声音和视频等多种模态表示事实。</p>\n<h2 id=\"2-2-LLM与KG统一框架\"><a href=\"#2-2-LLM与KG统一框架\" class=\"headerlink\" title=\"2.2 LLM与KG统一框架\"></a>2.2 LLM与KG统一框架</h2><p>《<a href=\"https://ieeexplore.ieee.org/abstract/document/10387715\">Unifying Large Language Models and Knowledge Graphs: A Roadmap</a>》一文中提出了 LLM 和 KG(知识图谱)统一的三个框架。</p>\n<p><img src=\"https://liam123.oss-cn-hangzhou.aliyuncs.com/blog/765954b6-c664-482a-9720-e76b126c9207.png\" alt=\"765954b6-c664-482a-9720-e76b126c9207\"></p>\n<ul>\n<li><strong>KG增强LLMs</strong>：<ul>\n<li><strong>目的</strong>：通过整合知识图谱中的结构化和领域特定知识来改进LLMs。这种整合主要发生在LLMs的预训练和推理阶段。</li>\n<li><strong>优点</strong>：通过提供事实和结构化知识，增强了LLMs的理解和推理能力。</li>\n</ul>\n</li>\n<li><strong>LLM增强KGs</strong>：<ul>\n<li><strong>目的</strong>：利用LLMs的能力执行有利于KGs的任务，如KG嵌入、完成、构建、图到文本生成和问题回答。</li>\n<li><strong>优点</strong>：通过利用LLMs的自然语言处理能力，旨在简化和提高KG相关任务的准确性。</li>\n</ul>\n</li>\n<li><strong>LLMs</strong> <strong>+ KGs的协同</strong>：<ul>\n<li><strong>目的</strong>：LLMs和KGs在一个互利的设置中共同工作，以增强彼此的能力。这种协同旨在优化知识表示和推理过程。</li>\n<li><strong>优点</strong>：促进双向推理，数据和知识驱动性能在复杂任务中的提升，导致在需要文本理解和事实知识的应用中更好的结果。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://liam123.oss-cn-hangzhou.aliyuncs.com/blog/image-20241029181228511.png\" alt=\"image-20241029181228511\"></p>\n","categories":["个人笔记"],"tags":["NLP"]},{"title":"LangGraph","url":"/2024/11/28/LangGraph/","content":"<h1 id=\"LangGraph\"><a href=\"#LangGraph\" class=\"headerlink\" title=\"LangGraph\"></a>LangGraph</h1><h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><h3 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h3><p><code>state</code> 代表图中节点的状态，通常用于存储节点或图的计算结果。状态是图中每个节点在执行过程中的“记忆”，它保存了执行过程中产生的中间结果或最终结果。它可以是任何 Python 类型，但通常是<code>TypedDict</code>或 Pydantic <code>BaseModel</code> 。(类型化字典)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义状态类型</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">State</span>(<span class=\"title class_ inherited__\">TypedDict</span>):</span><br><span class=\"line\">    messages: Annotated[<span class=\"built_in\">list</span>, add_messages]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Nodes\"><a href=\"#Nodes\" class=\"headerlink\" title=\"Nodes\"></a>Nodes</h3><p>​\t节点通常是一个对 <code>State</code> 进行操作的python函数，是图的基本组成单元。每个节点代表一个具体的操作或任务，通常是某种数据处理、调用外部 API等。一般有两个参数，state 和 config，<a href=\"https://langchain-ai.github.io/langgraph/concepts/low_level/#configuration\">config</a> 为可选参数。</p>\n<p>节点示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义节点函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">chatbot</span>(<span class=\"params\">state: State</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"string\">&quot;messages&quot;</span>: [model.invoke(state[<span class=\"string\">&quot;messages&quot;</span>])]&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># 增加节点，构建的工作流图为workflow</span></span><br><span class=\"line\">workflow.add_node(<span class=\"string\">&quot;chatbot&quot;</span>, chatbot)</span><br></pre></td></tr></table></figure>\n\n<p>特殊节点：</p>\n<ul>\n<li><code>START</code>节点，表示将用户输入发送到图形的节点。引用该节点的主要目的是确定应该首先调用哪些节点。</li>\n<li><code>END</code>节点，代表终端节点。当您想要指示哪些边完成后没有任何操作时，将引用此节点。</li>\n<li><code>Conditional Entry Point</code>节点，代表条件入口点。根据自定义逻辑从不同的节点开始。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> langgraph.graph <span class=\"keyword\">import</span> START, END</span><br><span class=\"line\"></span><br><span class=\"line\">graph.add_edge(START, <span class=\"string\">&quot;node_a&quot;</span>)</span><br><span class=\"line\">graph.add_edge(<span class=\"string\">&quot;node_a&quot;</span>, END)</span><br><span class=\"line\">graph.add_conditional_edges(START, routing_function, &#123;<span class=\"literal\">True</span>: <span class=\"string\">&quot;node_b&quot;</span>, <span class=\"literal\">False</span>: <span class=\"string\">&quot;node_c&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Reducers（化简器）\"><a href=\"#Reducers（化简器）\" class=\"headerlink\" title=\"Reducers（化简器）\"></a>Reducers（化简器）</h3><p>​\t<code>\treducer</code> 是一种函数，用于<strong>控制节点（node）更新状态（state）的方式</strong>。每个状态键都有自己的独立 reducer 函数，决定如何处理节点对该键的更新。如果没有明确指定 reducer 函数，则默认所有更新都会覆盖状态中的对应键值。</p>\n<p><img src=\"https://liam123.oss-cn-hangzhou.aliyuncs.com/blog/image-20241203152511627.png\" alt=\"image-20241203152511627\"></p>\n<p>​\t在与LLM交互中可以使用与构建的<code>add_messages</code>函数，对于全新的消息，它只会附加到现有列表，但它也会正确处理现有消息的更新。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">State</span>(<span class=\"title class_ inherited__\">TypedDict</span>):</span><br><span class=\"line\">    messages: Annotated[<span class=\"built_in\">list</span>, add_messages]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<h3 id=\"State、Node-和-Reducer-之间的关系\"><a href=\"#State、Node-和-Reducer-之间的关系\" class=\"headerlink\" title=\"State、Node 和 Reducer 之间的关系\"></a>State、Node 和 Reducer 之间的关系</h3><ul>\n<li><strong>数据流动</strong>：<code>Node</code> 从 <code>State</code> 中获取输入，进行计算或操作并生成输出。<code>Reducer</code> 负责将这些输出合并回 <code>State</code>，决定最终的状态更新方式。</li>\n<li><strong>协作方式</strong>：<ul>\n<li><code>Node</code> 是图的计算核心，执行具体的操作。</li>\n<li><code>State</code> 存储 <code>Node</code> 的输入和输出，实现数据的共享与传递。</li>\n<li><code>Reducer</code> 确保 <code>Node</code> 输出的数据可以合并到 <code>State</code>，避免直接覆盖造成的数据丢失。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"Edges\"><a href=\"#Edges\" class=\"headerlink\" title=\"Edges\"></a>Edges</h3><p>​\t<code>Edges</code>用于连接不同的节点（Nodes）并定义节点之间的依赖关系和数据流。边描述了一个节点的输出如何成为下一个节点的输入，从而建立起一个有序的任务流。</p>\n<p><strong>Edges 的类型：</strong></p>\n<ul>\n<li>普通边(Normal Edges)</li>\n</ul>\n<p>​\t直接连接两个节点，使用<code>add_edge</code>函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">graph.add_edge(<span class=\"string\">&quot;node_a&quot;</span>, <span class=\"string\">&quot;node_b&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>条件边(Conditional Edges)</li>\n</ul>\n<p>​\t允许根据特定条件将数据或状态路由到不同的节点。这种边的用途在于，当图执行时，可以根据条件动态地决定执行哪个节点，或者是否终止图的执行流程。</p>\n<p>示例：</p>\n<p>​\t新建一个图，其中包含 <code>node_a</code>、<code>node_b</code> 和 <code>node_c</code>。在执行完 <code>node_a</code> 后，根据特定条件决定接下来执行 <code>node_b</code> 或 <code>node_c</code>。</p>\n<p>​\t使用 <code>add_conditional_edges</code> 方法来实现条件路由：</p>\n<ul>\n<li><strong>node_a</strong>：表示条件判断节点，即在这个节点执行后，判断下一个要执行的节点。</li>\n<li><strong>routing_function</strong>：一个函数，根据当前的状态（state）返回一个值。这个值用于决定下一个要执行的节点。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">graph.add_conditional_edges(<span class=\"string\">&quot;node_a&quot;</span>, routing_function, &#123;<span class=\"literal\">True</span>: <span class=\"string\">&quot;node_b&quot;</span>, <span class=\"literal\">False</span>: <span class=\"string\">&quot;node_c&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Send\"><a href=\"#Send\" class=\"headerlink\" title=\"Send\"></a>Send</h3><p><code>Send</code> 是 LangGraph 中的一种特殊机制，用于在动态情况下向下游节点传递不同的状态。这种机制在节点和边的数量在图定义时未知的情况下非常有用。</p>\n<ul>\n<li><strong>动态生成多个任务</strong>：某个节点可能输出一个列表，你希望为列表中的每个元素生成一个单独的任务。</li>\n<li><strong>每个任务有独立状态</strong>：每个任务需要接收不同的状态，而不是共享同一个全局状态。</li>\n</ul>\n<p><strong>示例(生成笑话)：</strong></p>\n<ol>\n<li>起始节点 <code>node_a</code> 生成一个包含主题（subjects）的列表，例如 <code>[&quot;cats&quot;, &quot;dogs&quot;, &quot;robots&quot;]</code>。</li>\n<li>你希望为每个主题生成一个笑话（joke）。这意味着需要为每个主题创建一个独立的节点 <code>generate_joke</code>。</li>\n</ol>\n<p><strong>具体实现：</strong></p>\n<ol>\n<li>定义一个节点函数 <code>continue_to_jokes</code>：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">continue_to_jokes</span>(<span class=\"params\">state</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [Send(<span class=\"string\">&quot;generate_joke&quot;</span>, &#123;<span class=\"string\">&quot;subject&quot;</span>: s&#125;) <span class=\"keyword\">for</span> s <span class=\"keyword\">in</span> state[<span class=\"string\">&quot;subjects&quot;</span>]]</span><br></pre></td></tr></table></figure>\n\n<p><strong>输入</strong>：<code>state</code>，包含一个键 <code>subjects</code>，例如 <code>&#123;&quot;subjects&quot;: [&quot;cats&quot;, &quot;dogs&quot;, &quot;robots&quot;]&#125;</code>。</p>\n<p><strong>输出</strong>：</p>\n<ul>\n<li>每个主题（如 <code>&quot;cats&quot;</code>, <code>&quot;dogs&quot;</code>, <code>&quot;robots&quot;</code>）都生成一个 <code>Send</code> 对象。</li>\n<li><code>Send</code> 对象包含两部分：<ul>\n<li><strong>目标节点名称</strong>：<code>&quot;generate_joke&quot;</code>。</li>\n<li><strong>传递的状态</strong>：如 <code>&#123;&quot;subject&quot;: &quot;cats&quot;&#125;</code>。</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>添加条件边：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">graph.add_conditional_edges(<span class=\"string\">&quot;node_a&quot;</span>, continue_to_jokes)</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>node_a</code> 执行后，调用 <code>continue_to_jokes</code> 函数。根据<code>state[&quot;subjects&quot;]</code> 的内容，动态生成多个边，分别将状态传递给不同的 <code>generate_joke</code> 节点。</p>\n<h3 id=\"CheckPoint\"><a href=\"#CheckPoint\" class=\"headerlink\" title=\"CheckPoint\"></a>CheckPoint</h3><p><strong>检查点（Checkpoint）</strong>是用于<strong>保存图执行过程中状态快照</strong>的机制。每当图执行到一个超级步骤（super-step）时，检查点会记录当前的图状态，包括配置、元数据、状态通道的值、下一个要执行的节点以及即将执行的任务等信息。<strong>这些检查点被保存到一个线程中，允许在图执行后访问。</strong></p>\n<p>通过检查点，Langgraph能够实现：</p>\n<ol>\n<li><strong>状态追踪</strong>：记录当前的执行状态，包括节点的输入、输出及依赖关系。</li>\n<li><strong>容错性</strong>：在执行中断时，可以从最近的检查点恢复。</li>\n<li><strong>调试和分析</strong>：通过回溯检查点，可以追踪图中每个节点的执行和数据流动情况。</li>\n</ol>\n<blockquote>\n<p><strong>超级步骤（Super-step）</strong> 是一种用于表示图执行过程中的一组并行操作的概念。用简单的语言来说，超级步骤是图执行的一个阶段，这个阶段中所有可以独立并行执行的节点都会被同时运行。</p>\n</blockquote>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> langgraph.graph <span class=\"keyword\">import</span> StateGraph, START, END</span><br><span class=\"line\"><span class=\"keyword\">from</span> langgraph.checkpoint.memory <span class=\"keyword\">import</span> MemorySaver</span><br><span class=\"line\"><span class=\"keyword\">from</span> typing <span class=\"keyword\">import</span> Annotated</span><br><span class=\"line\"><span class=\"keyword\">from</span> typing_extensions <span class=\"keyword\">import</span> TypedDict</span><br><span class=\"line\"><span class=\"keyword\">from</span> operator <span class=\"keyword\">import</span> add</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">State</span>(<span class=\"title class_ inherited__\">TypedDict</span>):</span><br><span class=\"line\">    foo: <span class=\"built_in\">int</span></span><br><span class=\"line\">    bar: Annotated[<span class=\"built_in\">list</span>[<span class=\"built_in\">str</span>], add]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">node_a</span>(<span class=\"params\">state: State</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"string\">&quot;foo&quot;</span>: <span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>: [<span class=\"string\">&quot;a&quot;</span>]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">node_b</span>(<span class=\"params\">state: State</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"string\">&quot;foo&quot;</span>: <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>: [<span class=\"string\">&quot;b&quot;</span>]&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">workflow = StateGraph(State)</span><br><span class=\"line\">workflow.add_node(node_a)</span><br><span class=\"line\">workflow.add_node(node_b)</span><br><span class=\"line\">workflow.add_edge(START, <span class=\"string\">&quot;node_a&quot;</span>)</span><br><span class=\"line\">workflow.add_edge(<span class=\"string\">&quot;node_a&quot;</span>, <span class=\"string\">&quot;node_b&quot;</span>)</span><br><span class=\"line\">workflow.add_edge(<span class=\"string\">&quot;node_b&quot;</span>, END)</span><br><span class=\"line\"></span><br><span class=\"line\">checkpointer = MemorySaver()</span><br><span class=\"line\">graph = workflow.<span class=\"built_in\">compile</span>(checkpointer=checkpointer)</span><br><span class=\"line\">config = &#123;<span class=\"string\">&quot;configurable&quot;</span>: &#123;<span class=\"string\">&quot;thread_id&quot;</span>: <span class=\"string\">&quot;1&quot;</span>&#125;&#125;</span><br><span class=\"line\">graph.invoke(&#123;<span class=\"string\">&quot;foo&quot;</span>: <span class=\"string\">&quot;&quot;</span>&#125;, config)</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用 MemorySaver 类中的 list 方法列出检查点</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Listing all checkpoints:&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i, checkpoint <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(checkpointer.<span class=\"built_in\">list</span>(config=<span class=\"literal\">None</span>, limit=<span class=\"literal\">None</span>)):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Checkpoint <span class=\"subst\">&#123;i&#125;</span>: <span class=\"subst\">&#123;checkpoint&#125;</span>&quot;</span>)</span><br><span class=\"line\">Listing <span class=\"built_in\">all</span> checkpoints:</span><br><span class=\"line\">Checkpoint <span class=\"number\">0</span>: CheckpointTuple(config=&#123;<span class=\"string\">&#x27;configurable&#x27;</span>: &#123;<span class=\"string\">&#x27;thread_id&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;checkpoint_ns&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;checkpoint_id&#x27;</span>: <span class=\"string\">&#x27;1efa5742-633a-6108-8002-b180edc95236&#x27;</span>&#125;&#125;, checkpoint=&#123;<span class=\"string\">&#x27;v&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;ts&#x27;</span>: <span class=\"string\">&#x27;2024-11-18T06:12:54.748186+00:00&#x27;</span>, <span class=\"string\">&#x27;id&#x27;</span>: <span class=\"string\">&#x27;1efa5742-633a-6108-8002-b180edc95236&#x27;</span>, <span class=\"string\">&#x27;channel_values&#x27;</span>: &#123;<span class=\"string\">&#x27;foo&#x27;</span>: <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;bar&#x27;</span>: [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>], <span class=\"string\">&#x27;node_b&#x27;</span>: <span class=\"string\">&#x27;node_b&#x27;</span>&#125;, <span class=\"string\">&#x27;channel_versions&#x27;</span>: &#123;<span class=\"string\">&#x27;__start__&#x27;</span>: <span class=\"string\">&#x27;00000000000000000000000000000002.0.30080143812988014&#x27;</span>, <span class=\"string\">&#x27;foo&#x27;</span>: <span class=\"string\">&#x27;00000000000000000000000000000004.0.474844577270245&#x27;</span>, <span class=\"string\">&#x27;start:node_a&#x27;</span>: <span class=\"string\">&#x27;00000000000000000000000000000003.0.12003444808382124&#x27;</span>, <span class=\"string\">&#x27;node_a&#x27;</span>: <span class=\"string\">&#x27;00000000000000000000000000000004.0.1589923393691981&#x27;</span>, <span class=\"string\">&#x27;bar&#x27;</span>: <span class=\"string\">&#x27;00000000000000000000000000000004.0.5046522677833785&#x27;</span>, <span class=\"string\">&#x27;node_b&#x27;</span>: <span class=\"string\">&#x27;00000000000000000000000000000004.0.46221095770243503&#x27;</span>&#125;, <span class=\"string\">&#x27;versions_seen&#x27;</span>: &#123;<span class=\"string\">&#x27;__input__&#x27;</span>: &#123;&#125;, <span class=\"string\">&#x27;__start__&#x27;</span>: &#123;<span class=\"string\">&#x27;__start__&#x27;</span>: <span class=\"string\">&#x27;00000000000000000000000000000001.0.6609632407073991&#x27;</span>&#125;, <span class=\"string\">&#x27;node_a&#x27;</span>: &#123;<span class=\"string\">&#x27;start:node_a&#x27;</span>: <span class=\"string\">&#x27;00000000000000000000000000000002.0.6554068177967652&#x27;</span>&#125;, <span class=\"string\">&#x27;node_b&#x27;</span>: &#123;<span class=\"string\">&#x27;node_a&#x27;</span>: <span class=\"string\">&#x27;00000000000000000000000000000003.0.3729586093772994&#x27;</span>&#125;&#125;, <span class=\"string\">&#x27;pending_sends&#x27;</span>: []&#125;, metadata=&#123;<span class=\"string\">&#x27;source&#x27;</span>: <span class=\"string\">&#x27;loop&#x27;</span>, <span class=\"string\">&#x27;writes&#x27;</span>: &#123;<span class=\"string\">&#x27;node_b&#x27;</span>: &#123;<span class=\"string\">&#x27;foo&#x27;</span>: <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;bar&#x27;</span>: [<span class=\"string\">&#x27;b&#x27;</span>]&#125;&#125;, <span class=\"string\">&#x27;thread_id&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;step&#x27;</span>: <span class=\"number\">2</span>, <span class=\"string\">&#x27;parents&#x27;</span>: &#123;&#125;&#125;, parent_config=&#123;<span class=\"string\">&#x27;configurable&#x27;</span>: &#123;<span class=\"string\">&#x27;thread_id&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;checkpoint_ns&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;checkpoint_id&#x27;</span>: <span class=\"string\">&#x27;1efa5742-6335-62f2-8001-48489413a005&#x27;</span>&#125;&#125;, pending_writes=[])</span><br><span class=\"line\">Checkpoint <span class=\"number\">1</span>: CheckpointTuple(config=&#123;<span class=\"string\">&#x27;configurable&#x27;</span>: &#123;<span class=\"string\">&#x27;thread_id&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;checkpoint_ns&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;checkpoint_id&#x27;</span>: <span class=\"string\">&#x27;1efa5742-6335-62f2-8001-48489413a005&#x27;</span>&#125;&#125;, checkpoint=&#123;<span class=\"string\">&#x27;v&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;ts&#x27;</span>: <span class=\"string\">&#x27;2024-11-18T06:12:54.746187+00:00&#x27;</span>, <span class=\"string\">&#x27;id&#x27;</span>: <span class=\"string\">&#x27;1efa5742-6335-62f2-8001-48489413a005&#x27;</span>, <span class=\"string\">&#x27;channel_values&#x27;</span>: &#123;<span class=\"string\">&#x27;foo&#x27;</span>: <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;bar&#x27;</span>: [<span class=\"string\">&#x27;a&#x27;</span>], <span class=\"string\">&#x27;node_a&#x27;</span>: <span class=\"string\">&#x27;node_a&#x27;</span>&#125;, <span class=\"string\">&#x27;channel_versions&#x27;</span>: &#123;<span class=\"string\">&#x27;__start__&#x27;</span>: <span class=\"string\">&#x27;00000000000000000000000000000002.0.30080143812988014&#x27;</span>, <span class=\"string\">&#x27;foo&#x27;</span>: <span class=\"string\">&#x27;00000000000000000000000000000003.0.7942246031635175&#x27;</span>, <span class=\"string\">&#x27;start:node_a&#x27;</span>: <span class=\"string\">&#x27;00000000000000000000000000000003.0.12003444808382124&#x27;</span>, <span class=\"string\">&#x27;node_a&#x27;</span>: <span class=\"string\">&#x27;00000000000000000000000000000003.0.3729586093772994&#x27;</span>, <span class=\"string\">&#x27;bar&#x27;</span>: <span class=\"string\">&#x27;00000000000000000000000000000003.0.007073182768199904&#x27;</span>&#125;, <span class=\"string\">&#x27;versions_seen&#x27;</span>: &#123;<span class=\"string\">&#x27;__input__&#x27;</span>: &#123;&#125;, <span class=\"string\">&#x27;__start__&#x27;</span>: &#123;<span class=\"string\">&#x27;__start__&#x27;</span>: <span class=\"string\">&#x27;00000000000000000000000000000001.0.6609632407073991&#x27;</span>&#125;, <span class=\"string\">&#x27;node_a&#x27;</span>: &#123;<span class=\"string\">&#x27;start:node_a&#x27;</span>: <span class=\"string\">&#x27;00000000000000000000000000000002.0.6554068177967652&#x27;</span>&#125;&#125;, <span class=\"string\">&#x27;pending_sends&#x27;</span>: []&#125;, metadata=&#123;<span class=\"string\">&#x27;source&#x27;</span>: <span class=\"string\">&#x27;loop&#x27;</span>, <span class=\"string\">&#x27;writes&#x27;</span>: &#123;<span class=\"string\">&#x27;node_a&#x27;</span>: &#123;<span class=\"string\">&#x27;foo&#x27;</span>: <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;bar&#x27;</span>: [<span class=\"string\">&#x27;a&#x27;</span>]&#125;&#125;, <span class=\"string\">&#x27;thread_id&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;step&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;parents&#x27;</span>: &#123;&#125;&#125;, parent_config=&#123;<span class=\"string\">&#x27;configurable&#x27;</span>: &#123;<span class=\"string\">&#x27;thread_id&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;checkpoint_ns&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;checkpoint_id&#x27;</span>: <span class=\"string\">&#x27;1efa5742-6330-64cc-8000-2ec8c736999a&#x27;</span>&#125;&#125;, pending_writes=[(<span class=\"string\">&#x27;138cd50f-36f2-b67e-2bee-db094e8be206&#x27;</span>, <span class=\"string\">&#x27;node_b&#x27;</span>, <span class=\"string\">&#x27;node_b&#x27;</span>), (<span class=\"string\">&#x27;138cd50f-36f2-b67e-2bee-db094e8be206&#x27;</span>, <span class=\"string\">&#x27;foo&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>), (<span class=\"string\">&#x27;138cd50f-36f2-b67e-2bee-db094e8be206&#x27;</span>, <span class=\"string\">&#x27;bar&#x27;</span>, [<span class=\"string\">&#x27;b&#x27;</span>])])</span><br><span class=\"line\">Checkpoint <span class=\"number\">2</span>: CheckpointTuple(config=&#123;<span class=\"string\">&#x27;configurable&#x27;</span>: &#123;<span class=\"string\">&#x27;thread_id&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;checkpoint_ns&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;checkpoint_id&#x27;</span>: <span class=\"string\">&#x27;1efa5742-6330-64cc-8000-2ec8c736999a&#x27;</span>&#125;&#125;, checkpoint=&#123;<span class=\"string\">&#x27;v&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;ts&#x27;</span>: <span class=\"string\">&#x27;2024-11-18T06:12:54.744186+00:00&#x27;</span>, <span class=\"string\">&#x27;id&#x27;</span>: <span class=\"string\">&#x27;1efa5742-6330-64cc-8000-2ec8c736999a&#x27;</span>, <span class=\"string\">&#x27;channel_values&#x27;</span>: &#123;<span class=\"string\">&#x27;foo&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;start:node_a&#x27;</span>: <span class=\"string\">&#x27;__start__&#x27;</span>&#125;, <span class=\"string\">&#x27;channel_versions&#x27;</span>: &#123;<span class=\"string\">&#x27;__start__&#x27;</span>: <span class=\"string\">&#x27;00000000000000000000000000000002.0.30080143812988014&#x27;</span>, <span class=\"string\">&#x27;foo&#x27;</span>: <span class=\"string\">&#x27;00000000000000000000000000000002.0.7145016081108931&#x27;</span>, <span class=\"string\">&#x27;start:node_a&#x27;</span>: <span class=\"string\">&#x27;00000000000000000000000000000002.0.6554068177967652&#x27;</span>&#125;, <span class=\"string\">&#x27;versions_seen&#x27;</span>: &#123;<span class=\"string\">&#x27;__input__&#x27;</span>: &#123;&#125;, <span class=\"string\">&#x27;__start__&#x27;</span>: &#123;<span class=\"string\">&#x27;__start__&#x27;</span>: <span class=\"string\">&#x27;00000000000000000000000000000001.0.6609632407073991&#x27;</span>&#125;&#125;, <span class=\"string\">&#x27;pending_sends&#x27;</span>: []&#125;, metadata=&#123;<span class=\"string\">&#x27;source&#x27;</span>: <span class=\"string\">&#x27;loop&#x27;</span>, <span class=\"string\">&#x27;writes&#x27;</span>: <span class=\"literal\">None</span>, <span class=\"string\">&#x27;thread_id&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;step&#x27;</span>: <span class=\"number\">0</span>, <span class=\"string\">&#x27;parents&#x27;</span>: &#123;&#125;&#125;, parent_config=&#123;<span class=\"string\">&#x27;configurable&#x27;</span>: &#123;<span class=\"string\">&#x27;thread_id&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;checkpoint_ns&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;checkpoint_id&#x27;</span>: <span class=\"string\">&#x27;1efa5742-632b-66bb-bfff-73311126f0be&#x27;</span>&#125;&#125;, pending_writes=[(<span class=\"string\">&#x27;58936bee-2bb1-b108-5d96-98ea20b5dc43&#x27;</span>, <span class=\"string\">&#x27;node_a&#x27;</span>, <span class=\"string\">&#x27;node_a&#x27;</span>), (<span class=\"string\">&#x27;58936bee-2bb1-b108-5d96-98ea20b5dc43&#x27;</span>, <span class=\"string\">&#x27;foo&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>), (<span class=\"string\">&#x27;58936bee-2bb1-b108-5d96-98ea20b5dc43&#x27;</span>, <span class=\"string\">&#x27;bar&#x27;</span>, [<span class=\"string\">&#x27;a&#x27;</span>])])</span><br><span class=\"line\">Checkpoint <span class=\"number\">3</span>: CheckpointTuple(config=&#123;<span class=\"string\">&#x27;configurable&#x27;</span>: &#123;<span class=\"string\">&#x27;thread_id&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;checkpoint_ns&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;checkpoint_id&#x27;</span>: <span class=\"string\">&#x27;1efa5742-632b-66bb-bfff-73311126f0be&#x27;</span>&#125;&#125;, checkpoint=&#123;<span class=\"string\">&#x27;v&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;ts&#x27;</span>: <span class=\"string\">&#x27;2024-11-18T06:12:54.742188+00:00&#x27;</span>, <span class=\"string\">&#x27;id&#x27;</span>: <span class=\"string\">&#x27;1efa5742-632b-66bb-bfff-73311126f0be&#x27;</span>, <span class=\"string\">&#x27;channel_values&#x27;</span>: &#123;<span class=\"string\">&#x27;__start__&#x27;</span>: &#123;<span class=\"string\">&#x27;foo&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>&#125;&#125;, <span class=\"string\">&#x27;channel_versions&#x27;</span>: &#123;<span class=\"string\">&#x27;__start__&#x27;</span>: <span class=\"string\">&#x27;00000000000000000000000000000001.0.6609632407073991&#x27;</span>&#125;, <span class=\"string\">&#x27;versions_seen&#x27;</span>: &#123;<span class=\"string\">&#x27;__input__&#x27;</span>: &#123;&#125;&#125;, <span class=\"string\">&#x27;pending_sends&#x27;</span>: []&#125;, metadata=&#123;<span class=\"string\">&#x27;source&#x27;</span>: <span class=\"string\">&#x27;input&#x27;</span>, <span class=\"string\">&#x27;writes&#x27;</span>: &#123;<span class=\"string\">&#x27;__start__&#x27;</span>: &#123;<span class=\"string\">&#x27;foo&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>&#125;&#125;, <span class=\"string\">&#x27;thread_id&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;step&#x27;</span>: -<span class=\"number\">1</span>, <span class=\"string\">&#x27;parents&#x27;</span>: &#123;&#125;&#125;, parent_config=<span class=\"literal\">None</span>, pending_writes=[(<span class=\"string\">&#x27;c41ace2c-3b71-8bc3-68ea-0111998fd051&#x27;</span>, <span class=\"string\">&#x27;foo&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>), (<span class=\"string\">&#x27;c41ace2c-3b71-8bc3-68ea-0111998fd051&#x27;</span>, <span class=\"string\">&#x27;start:node_a&#x27;</span>, <span class=\"string\">&#x27;__start__&#x27;</span>)])</span><br></pre></td></tr></table></figure>\n\n<p>列出检查点后，总计有4个检查点</p>\n<ul>\n<li>空检查点，其中<code>START</code>是接下来要执行的节点</li>\n<li>具有用户输入<code>&#123;&#39;foo&#39;: &#39;&#39;, &#39;bar&#39;: []&#125;</code>和<code>node_a</code>作为接下来要执行的节点的检查点</li>\n<li>具有<code>node_a</code>的输出<code>&#123;&#39;foo&#39;: &#39;a&#39;, &#39;bar&#39;: [&#39;a&#39;]&#125;</code>和<code>node_b</code>作为接下来要执行的节点的检查点</li>\n<li>具有<code>node_b</code>的输出<code>&#123;&#39;foo&#39;: &#39;b&#39;, &#39;bar&#39;: [&#39;a&#39;, &#39;b&#39;]&#125;</code>且没有要执行的下一个节点的检查点</li>\n</ul>\n<p><strong>获取特定检查点的状态(get_state)</strong></p>\n<p><strong>参数</strong>：线程ID、检查点ID(未设置则获取该线程第一个检查点的状态)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">config = &#123;<span class=\"string\">&quot;configurable&quot;</span>: &#123;<span class=\"string\">&quot;thread_id&quot;</span>: <span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;checkpoint_id&quot;</span>: <span class=\"string\">&quot;1efa5742-6335-62f2-8001-48489413a005&quot;</span>&#125;&#125;</span><br><span class=\"line\">graph.get_state(config)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">StateSnapshot(values=&#123;<span class=\"string\">&#x27;foo&#x27;</span>: <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;bar&#x27;</span>: [<span class=\"string\">&#x27;a&#x27;</span>]&#125;, <span class=\"built_in\">next</span>=(<span class=\"string\">&#x27;node_b&#x27;</span>,), config=&#123;<span class=\"string\">&#x27;configurable&#x27;</span>: &#123;<span class=\"string\">&#x27;thread_id&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;checkpoint_id&#x27;</span>: <span class=\"string\">&#x27;1efa5742-6335-62f2-8001-48489413a005&#x27;</span>&#125;&#125;, metadata=&#123;<span class=\"string\">&#x27;source&#x27;</span>: <span class=\"string\">&#x27;loop&#x27;</span>, <span class=\"string\">&#x27;writes&#x27;</span>: &#123;<span class=\"string\">&#x27;node_a&#x27;</span>: &#123;<span class=\"string\">&#x27;foo&#x27;</span>: <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;bar&#x27;</span>: [<span class=\"string\">&#x27;a&#x27;</span>]&#125;&#125;, <span class=\"string\">&#x27;thread_id&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;step&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;parents&#x27;</span>: &#123;&#125;&#125;, created_at=<span class=\"string\">&#x27;2024-11-18T06:12:54.746187+00:00&#x27;</span>, parent_config=&#123;<span class=\"string\">&#x27;configurable&#x27;</span>: &#123;<span class=\"string\">&#x27;thread_id&#x27;</span>: <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;checkpoint_ns&#x27;</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;checkpoint_id&#x27;</span>: <span class=\"string\">&#x27;1efa5742-6330-64cc-8000-2ec8c736999a&#x27;</span>&#125;&#125;, tasks=(PregelTask(<span class=\"built_in\">id</span>=<span class=\"string\">&#x27;138cd50f-36f2-b67e-2bee-db094e8be206&#x27;</span>, name=<span class=\"string\">&#x27;node_b&#x27;</span>, path=(<span class=\"string\">&#x27;__pregel_pull&#x27;</span>, <span class=\"string\">&#x27;node_b&#x27;</span>), error=<span class=\"literal\">None</span>, interrupts=(), state=<span class=\"literal\">None</span>, result=&#123;<span class=\"string\">&#x27;foo&#x27;</span>: <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;bar&#x27;</span>: [<span class=\"string\">&#x27;b&#x27;</span>]&#125;),))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Memory-Store-记忆库\"><a href=\"#Memory-Store-记忆库\" class=\"headerlink\" title=\"Memory Store (记忆库)\"></a>Memory Store (记忆库)</h3><p><img src=\"https://liam123.oss-cn-hangzhou.aliyuncs.com/blog/image-20241203152731149.png\" alt=\"image-20241203152731149\"></p>\n<p>相当于将历史对话信息&#x2F;有关用户的信息存储在一个类似数据库的”记忆库”中，通过定义一个<code>InMemoryStore</code>来跨线程存储有关用户的信息，然后再后续的线程中进行调用。</p>\n<p><a href=\"https://github.langchain.ac.cn/langgraph/how-tos/memory/manage-conversation-history/\">https://github.langchain.ac.cn/langgraph/how-tos/memory/manage-conversation-history/</a></p>\n<h3 id=\"Breakpoints\"><a href=\"#Breakpoints\" class=\"headerlink\" title=\"Breakpoints\"></a>Breakpoints</h3><p><a href=\"https://langchain-ai.github.io/langgraph/how-tos/human_in_the_loop/breakpoints/\">https://langchain-ai.github.io/langgraph/how-tos/human_in_the_loop/breakpoints/</a></p>\n<h3 id=\"可视化\"><a href=\"#可视化\" class=\"headerlink\" title=\"可视化\"></a>可视化</h3><p>官方提供三种可视化方法</p>\n<ul>\n<li>Mermaid.Ink</li>\n<li>Mermaid + Pyppeteer</li>\n<li>Graphviz</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编译图</span></span><br><span class=\"line\">chain = workflow.<span class=\"built_in\">compile</span>()</span><br><span class=\"line\"><span class=\"comment\"># 编译图后使用 Mermaid.Ink</span></span><br><span class=\"line\">display(Image(chain.get_graph().draw_mermaid_png()))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h2><h3 id=\"路由器\"><a href=\"#路由器\" class=\"headerlink\" title=\"路由器\"></a>路由器</h3><p>​\t<strong>Router（路由器）</strong> 是一个强大的功能，用于动态控制图的执行路径。它允许根据 <strong>状态（State）</strong> 或某个函数的返回值，将执行流程引导到不同的节点。</p>\n<p>功能：</p>\n<ul>\n<li><strong>动态路由</strong>： 根据 <code>state</code> 或 <code>函数返回值</code>，选择性地执行一个或多个后续节点。</li>\n<li><strong>条件分支</strong>： 根据某些条件，决定执行哪些分支节点。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义路由函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">routing_function</span>(<span class=\"params\">state</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> state[<span class=\"string\">&quot;is_valid&quot;</span>]:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;node_b&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;node_c&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加条件路由器</span></span><br><span class=\"line\">graph.add_conditional_edges(</span><br><span class=\"line\">    <span class=\"string\">&quot;node_a&quot;</span>,  <span class=\"comment\"># 当前节点</span></span><br><span class=\"line\">    routing_function,  <span class=\"comment\"># 路由函数</span></span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;node_b&quot;</span>: <span class=\"string\">&quot;node_b&quot;</span>, <span class=\"string\">&quot;node_c&quot;</span>: <span class=\"string\">&quot;node_c&quot;</span>&#125;  <span class=\"comment\"># 路由表</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>支持并行处理</strong>： Router 可以同时将执行路径分发到多个节点。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义路由函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dynamic_routing</span>(<span class=\"params\">state</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 假设返回值是一个节点列表</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> state[<span class=\"string\">&quot;routes&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加动态路由器</span></span><br><span class=\"line\">graph.add_conditional_edges(</span><br><span class=\"line\">    <span class=\"string\">&quot;node_a&quot;</span>,</span><br><span class=\"line\">    dynamic_routing,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;node_b&quot;</span>: <span class=\"string\">&quot;node_b&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;node_c&quot;</span>: <span class=\"string\">&quot;node_c&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;node_d&quot;</span>: <span class=\"string\">&quot;node_d&quot;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"工具调用代理\"><a href=\"#工具调用代理\" class=\"headerlink\" title=\"工具调用代理\"></a>工具调用代理</h3><p><img src=\"https://liam123.oss-cn-hangzhou.aliyuncs.com/blog/image-20241203152908372.png\" alt=\"image-20241203152908372\"></p>\n<h2 id=\"案例：\"><a href=\"#案例：\" class=\"headerlink\" title=\"案例：\"></a>案例：</h2><h3 id=\"构建LangGraph步骤-LLM问答-：\"><a href=\"#构建LangGraph步骤-LLM问答-：\" class=\"headerlink\" title=\"构建LangGraph步骤(LLM问答)：\"></a>构建LangGraph步骤(LLM问答)：</h3><p>1.初始化模型和工具</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建 LLM 实例</span></span><br><span class=\"line\">model = ChatOpenAI(</span><br><span class=\"line\">    model=<span class=\"string\">&#x27;gpt-4o-mini&#x27;</span>,</span><br><span class=\"line\">    api_key=OPENAI_API_KEY,</span><br><span class=\"line\">    base_url=OPENAI_API_URL,</span><br><span class=\"line\">    temperature=<span class=\"number\">0.7</span>,</span><br><span class=\"line\">    max_retries=<span class=\"number\">3</span>,</span><br><span class=\"line\">    timeout=<span class=\"number\">30</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>2.用状态初始化图</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义状态类型</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">State</span>(<span class=\"title class_ inherited__\">TypedDict</span>):</span><br><span class=\"line\">    messages: Annotated[<span class=\"built_in\">list</span>, add_messages]</span><br></pre></td></tr></table></figure>\n\n<p>3.定义图节点</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义节点函数</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">chatbot</span>(<span class=\"params\">state: State</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;生成 AI 响应的节点&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"string\">&quot;messages&quot;</span>: [model.invoke(state[<span class=\"string\">&quot;messages&quot;</span>])]&#125;</span><br></pre></td></tr></table></figure>\n\n<p>构建工作流图</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 构建工作流图</span></span><br><span class=\"line\">workflow = StateGraph(State)</span><br></pre></td></tr></table></figure>\n\n<p>4.定义入口点和图边</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 增加节点</span></span><br><span class=\"line\">workflow.add_node(<span class=\"string\">&quot;chatbot&quot;</span>, chatbot)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 增加边</span></span><br><span class=\"line\">workflow.add_edge(START, <span class=\"string\">&quot;chatbot&quot;</span>)</span><br><span class=\"line\">workflow.add_edge(<span class=\"string\">&quot;chatbot&quot;</span>, END)</span><br></pre></td></tr></table></figure>\n\n<p>5.编译执行图</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 编译图</span></span><br><span class=\"line\">chain = workflow.<span class=\"built_in\">compile</span>()</span><br></pre></td></tr></table></figure>\n\n<p>6.可视化</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">display(Image(chain.get_graph().draw_mermaid_png()))</span><br></pre></td></tr></table></figure>\n\n<p>基本概念：<a href=\"https://langchain-ai.github.io/langgraph/concepts/low_level/#graphs\">https://langchain-ai.github.io/langgraph/concepts/low_level/#graphs</a></p>\n<p>简单人机交互：<a href=\"https://readmedium.com/implementing-human-in-the-loop-with-LangGraph-ccfde023385c\">https://readmedium.com/implementing-human-in-the-loop-with-LangGraph-ccfde023385c</a></p>\n","categories":["个人笔记"],"tags":["LLM"]}]